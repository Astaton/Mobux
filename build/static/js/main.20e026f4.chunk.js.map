{"version":3,"sources":["SearchBar.js","BigDogPic.js","DogPic.js","ResultPageExplorer.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","keyCode","this","clickHandler","document","getElementById","addEventListener","evt","searchOnEnter","removeEventListener","searchInputElem","breed","value","props","searchForBreed","className","htmlFor","type","id","name","defaultValue","onClick","Component","BigDogPic","imgUrl","hideBigPic","alt","src","DogPic","picClickHandler","ResultPageExplorer","changePageHandler","page","dogData","pages","allPages","Array","Math","ceil","length","keys","pageIndex","start","end","slice","console","log","disabled","map","pagesIndex","goToPageNo","key","App","state","dogsOnPage","selectedDogImgUrl","status","bind","request","XMLHttpRequest","componentThis","open","onload","response","JSON","parse","responseText","setState","message","updatePicsOnPage","send","num","newPage","classList","add","remove","pup","index","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.20e026f4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass SearchBar extends Component {\n  searchOnEnter({ keyCode }) {\n    if (keyCode === 13) {\n      this.clickHandler();\n    }\n  }\n\n  componentDidMount() {\n    const searchInputElem = document.getElementById(\"searchInput\");\n    searchInputElem.addEventListener(\"keyup\", (evt) => this.searchOnEnter(evt));\n  }\n\n  componentWillUnmount() {\n    const searchInputElem = document.getElementById(\"searchInput\");\n    searchInputElem.removeEventListener(\"keyup\", (evt) =>\n      this.searchOnEnter(evt)\n    );\n  }\n\n  clickHandler() {\n    const searchInputElem = document.getElementById(\"searchInput\");\n    const breed = searchInputElem.value;\n    if (breed) {\n      searchInputElem.value = \"\";\n      this.props.searchForBreed(breed);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"searchWrapper\">\n        <label htmlFor=\"searchInput\">\n          Enter the breed of dog to search for\n        </label>\n        <br></br>\n        <input\n          type=\"text\"\n          id=\"searchInput\"\n          name=\"searchInput\"\n          defaultValue=\"poodle\"\n        />\n        <button onClick={() => this.clickHandler()}>Search</button>\n      </div>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React from \"react\";\n\nconst BigDogPic = ({ imgUrl, breed, hideBigPic }) => (\n  <div id=\"bigPicContainer\" className=\"hideBigPic\" onClick={() => hideBigPic()}>\n    <img className=\"bigDogPic\" alt={`a ${breed} good boy`} src={imgUrl} />\n  </div>\n);\n\nexport default BigDogPic;\n","import React from \"react\";\n\nconst DogPic = ({ imgUrl, breed, picClickHandler }) => (\n  <div className=\"dogPicFrame\">\n    <img\n      className=\"dogPic\"\n      src={imgUrl}\n      alt={`a ${breed} good boy`}\n      onClick={() => picClickHandler(imgUrl)}\n    />\n  </div>\n);\n\nexport default DogPic;\n","import React from \"react\";\n\nconst ResultPageExplorer = ({ changePageHandler, page, dogData }) => {\n  const pages = (function () {\n    const allPages = [...Array(Math.ceil(dogData.length / 9)).keys()];\n    let pageIndex = page - 1;\n    let start = pageIndex > 5 ? pageIndex - 5 : 0;\n    let end = start + 10;\n    return allPages.slice(start, end);\n  })();\n\n  console.log(pages);\n\n  return (\n    <div className=\"ResultPageExplorerContainer\">\n      <button\n        onClick={() => changePageHandler(-1)}\n        disabled={page === 1 ? \"disabled\" : null}\n      >\n        Previous\n      </button>\n      <div className=\"pageNumWrapper\">\n        {pages.map((pagesIndex) => {\n          const goToPageNo = pagesIndex + 1;\n          return goToPageNo !== page ? (\n            <span\n              className=\"pageExplorerNumsDefault\"\n              key={`page${goToPageNo}`}\n              onClick={() => changePageHandler(goToPageNo - page)}\n            >\n              {goToPageNo}\n            </span>\n          ) : (\n            <span className=\"pageExplorerNumsActive\" key={`page${goToPageNo}`}>\n              {goToPageNo}\n            </span>\n          );\n        })}\n      </div>\n      <button\n        onClick={() => changePageHandler(1)}\n        disabled={Math.ceil(dogData.length / 9) === page ? \"disabled\" : null}\n      >\n        Next\n      </button>\n    </div>\n  );\n};\n\nexport default ResultPageExplorer;\n","import React, { Component } from \"react\";\nimport SearchBar from \"./SearchBar\";\nimport BigDogPic from \"./BigDogPic\";\nimport DogPic from \"./DogPic\";\nimport ResultPageExplorer from \"./ResultPageExplorer\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dogData: \"Search for a good boy?\",\n      dogsOnPage: [],\n      selectedDogImgUrl: \"\",\n      status: \"error\",\n      page: 1,\n    };\n    this.searchForBreed = this.searchForBreed.bind(this);\n    this.picClickHandler = this.picClickHandler.bind(this);\n    this.hideBigPic = this.hideBigPic.bind(this);\n    this.changePageHandler = this.changePageHandler.bind(this);\n  }\n\n  componentDidMount() {}\n\n  searchForBreed(breed) {\n    const request = new XMLHttpRequest();\n    const componentThis = this;\n\n    request.open(\"get\", `https://dog.ceo/api/breed/${breed}/images`);\n    request.onload = function () {\n      const response = JSON.parse(request.responseText);\n      console.log(response);\n      componentThis.setState(\n        {\n          dogData: response.message,\n          status: response.status,\n          breed: breed,\n          page: 1,\n        },\n        () => {\n          console.log(componentThis.state.status);\n          if (componentThis.state.status === \"success\") {\n            componentThis.updatePicsOnPage();\n          }\n        }\n      );\n    };\n    request.send();\n  }\n\n  updatePicsOnPage() {\n    const end = this.state.page * 9;\n    const start = end - 9;\n    const dogsOnPage = this.state.dogData.slice(start, end);\n    this.setState({ dogsOnPage });\n  }\n\n  changePageHandler(num) {\n    const newPage = this.state.page + num;\n    this.setState({ page: newPage }, () => {\n      this.updatePicsOnPage();\n    });\n  }\n\n  picClickHandler(imgUrl) {\n    const bigPicElem = document.getElementById(\"bigPicContainer\");\n    bigPicElem.classList.add(\"showBigPic\");\n    this.setState({ selectedDogImgUrl: imgUrl });\n  }\n\n  hideBigPic() {\n    console.log(\"runnning hideBigPic\");\n    const bigPicElem = document.getElementById(\"bigPicContainer\");\n    bigPicElem.classList.remove(\"showBigPic\");\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <BigDogPic\n          breed={this.state.breed}\n          imgUrl={this.state.selectedDogImgUrl}\n          hideBigPic={this.hideBigPic}\n        />\n        <SearchBar searchForBreed={this.searchForBreed} />\n        {this.state.status === \"success\" ? (\n          <div id=\"displayWrapper\">\n            <p>{`Your search for ${this.state.breed}s found ${this.state.dogData.length} images`}</p>\n            <div id=\"displayBox\">\n              {this.state.dogsOnPage.map((pup, index) => (\n                <DogPic\n                  key={index + pup}\n                  imgUrl={pup}\n                  breed={this.state.breed}\n                  picClickHandler={this.picClickHandler}\n                />\n              ))}\n            </div>\n            <ResultPageExplorer\n              changePageHandler={this.changePageHandler}\n              page={this.state.page}\n              dogData={this.state.dogData}\n            />\n          </div>\n        ) : (\n          <div>\n            <p>\n              {this.state.breed\n                ? `An error occured while searching for ${this.state.breed}s`\n                : \"\"}\n            </p>\n            <p>{this.state.dogData}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}